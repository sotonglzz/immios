# IMMIOS - Cursor Global Rules

## ðŸ”„ Project Awareness & Context

### Always read `PLANNING.md` at the start of a new conversation
- Understand the project's architecture, goals, style, and constraints
- Reference the high-level vision and technical decisions
- Follow the established tech stack and development guidelines
- Use the documented data model and code organization patterns

### Check `TASK.md` before starting a new task
- If the task isn't listed, add it with a brief description and today's date
- Mark completed tasks immediately after finishing them
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a "Discovered During Work" section
- Update progress percentages after milestone completions

### Use consistent naming conventions, file structure, and architecture patterns
- Follow the structure outlined in `PLANNING.md`
- Use the established code organization patterns
- Maintain consistency with existing naming conventions
- Reference the documented architectural decisions

## ðŸ§± Code Structure & Modularity

### File Length Management
- **Avoid creating a file longer than 500 lines of code**
- If a file approaches this limit, refactor by splitting it into modules or helper files
- If refactoring would break the UI or code, allow for more than 500 lines by prompting the user for confirmation of adding that one file to a whitelist of files allowed above 500 lines
- Document any exceptions in the project documentation

### Code Organization
- **Organize code into clearly separated modules**, grouped by feature or responsibility
- Follow the established project structure:
  ```
  src/
  â”œâ”€â”€ components/          # Reusable UI components
  â”œâ”€â”€ pages/              # Next.js pages and API routes
  â”œâ”€â”€ hooks/              # Custom React hooks
  â”œâ”€â”€ utils/              # Utility functions
  â”œâ”€â”€ types/              # TypeScript type definitions
  â”œâ”€â”€ services/           # Business logic and API calls
  â”œâ”€â”€ styles/             # Global styles and Tailwind config
  â””â”€â”€ firebase/           # Firebase configuration and helpers
  ```

### Import Management
- **Use clear, consistent imports** (prefer relative imports within packages)
- Group imports logically (external libraries, internal modules, types)
- Use absolute imports for shared utilities and types
- Maintain consistent import ordering

## ðŸ§ª Testing & Reliability

### Unit Testing Requirements
- **Always create unit tests for new features** (functions, classes, routes, etc.)
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure

### Test Coverage Standards
- Include at least:
  - 1 test for expected use
  - 1 edge case
  - 1 failure case
- Test critical business logic thoroughly
- Ensure authentication and authorization tests
- Test real-time functionality where applicable

### Test Organization
```
tests/
â”œâ”€â”€ components/           # Component tests
â”œâ”€â”€ pages/               # Page and API route tests
â”œâ”€â”€ hooks/               # Custom hook tests
â”œâ”€â”€ services/            # Business logic tests
â”œâ”€â”€ utils/               # Utility function tests
â””â”€â”€ integration/         # Integration tests
```

## âœ… Task Completion & Documentation

### Task Management
- **Mark completed tasks in `TASK.md`** immediately after finishing them
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a "Discovered During Work" section
- Update progress tracking and milestone status
- Document any architectural decisions or business insights discovered

### Version Control Integration
- Use the established commit message conventions for auto-versioning:
  - `[major]` or `BREAKING CHANGE`: Major version bump
  - `[minor]` or `feat:`: Minor version bump
  - `[patch]` or `fix:`: Patch version bump
- The auto-versioning system will automatically update `HISTORY.md` and `TASK.md`

### Documentation Standards
- Update relevant documentation when making architectural changes
- Add comments for complex business logic
- Document any deviations from the planned architecture
- Keep `PLANNING.md` updated with any architectural decisions

## ðŸš€ Development Workflow

### Before Starting Work
1. Read `PLANNING.md` for context and architecture
2. Check `TASK.md` for current tasks and priorities
3. Review `HISTORY.md` for recent changes and context
4. Ensure understanding of the current development phase

### During Development
1. Follow the established code structure and patterns
2. Create tests for new functionality
3. Update task status as work progresses
4. Document any discoveries or decisions

### After Completing Work
1. Mark tasks as completed in `TASK.md`
2. Update any relevant documentation
3. Ensure tests are passing
4. Commit with appropriate version bump keywords

## ðŸ”§ Technical Standards

### TypeScript & React
- Use strict TypeScript configuration
- Prefer functional components with hooks
- Use proper type definitions for all data structures
- Follow React best practices and patterns

### Firebase & Real-time
- Follow the established Firestore data model
- Implement proper security rules
- Handle real-time updates efficiently
- Implement offline functionality for critical features

### Performance & Scalability
- Optimize for the performance requirements outlined in `PLANNING.md`
- Implement proper error boundaries
- Handle loading states appropriately
- Consider mobile responsiveness

## ðŸ“‹ Quality Assurance

### Code Quality
- Follow ESLint and Prettier configurations
- Maintain consistent code style
- Use meaningful variable and function names
- Add JSDoc comments for complex functions

### Security
- Implement proper authentication and authorization
- Validate all user inputs
- Follow Firebase security best practices
- Protect sensitive data and API endpoints

### Accessibility
- Ensure proper ARIA labels and roles
- Maintain keyboard navigation support
- Test with screen readers where applicable
- Follow WCAG guidelines

---

**Remember**: These rules are designed to maintain consistency, quality, and proper documentation throughout the IMMIOS project development. Always reference `PLANNING.md` for architectural decisions and `TASK.md` for current priorities. 